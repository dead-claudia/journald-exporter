// WARNING: This file is auto-generated by `scripts/gen-args-tests.js`. Do not modify directly.

use crate::cli::args::*;

fn parse_args(args: &[&str]) -> Result<Args, ArgsError> {
    crate::cli::args::parse_args(args.iter().map(std::ffi::OsString::from))
}

#[test]
fn config_start_returns_missing_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config"]),
        Err(ArgsError::MissingConfig),
    );
}

#[test]
fn config_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config", ""]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn config_eq_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config="]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn config_arg_ending_in_colon_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config", "blah:"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn config_eq_arg_ending_in_colon_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config=blah:"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn config_arg_with_special_chars_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config", "b/l@a!h:"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn config_eq_arg_with_special_chars_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config=b/l@a!h:"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn config_normal_path_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config", "some/config.toml"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from(
            "some/config.toml"
        ))),
    );
}

#[test]
fn config_eq_normal_path_returns_parent_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--config=some/config.toml"]),
        Ok(Args::ParentConfig(std::path::PathBuf::from(
            "some/config.toml"
        ))),
    );
}

#[test]
fn check_short_start_returns_missing_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c"]),
        Err(ArgsError::MissingConfig),
    );
}

#[test]
fn check_long_start_returns_missing_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check"]),
        Err(ArgsError::MissingConfig),
    );
}

#[test]
fn check_short_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c", ""]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn check_short_eq_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c="]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn check_long_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check", ""]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn check_long_eq_arg_with_empty_value_returns_empty_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check="]),
        Err(ArgsError::EmptyConfig),
    );
}

#[test]
fn check_short_arg_ending_in_colon_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c", "blah:"]),
        Ok(Args::Check(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn check_short_eq_arg_ending_in_colon_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c=blah:"]),
        Ok(Args::Check(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn check_long_arg_ending_in_colon_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check", "blah:"]),
        Ok(Args::Check(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn check_long_eq_arg_ending_in_colon_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check=blah:"]),
        Ok(Args::Check(std::path::PathBuf::from("blah:"))),
    );
}

#[test]
fn check_short_arg_with_special_chars_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c", "b/l@a!h:"]),
        Ok(Args::Check(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn check_short_eq_arg_with_special_chars_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c=b/l@a!h:"]),
        Ok(Args::Check(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn check_long_arg_with_special_chars_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check", "b/l@a!h:"]),
        Ok(Args::Check(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn check_long_eq_arg_with_special_chars_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check=b/l@a!h:"]),
        Ok(Args::Check(std::path::PathBuf::from("b/l@a!h:"))),
    );
}

#[test]
fn check_short_normal_private_key_path_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c", "some/config.toml"]),
        Ok(Args::Check(std::path::PathBuf::from("some/config.toml"))),
    );
}

#[test]
fn check_short_eq_normal_private_key_path_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "-c=some/config.toml"]),
        Ok(Args::Check(std::path::PathBuf::from("some/config.toml"))),
    );
}

#[test]
fn check_long_normal_private_key_path_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check", "some/config.toml"]),
        Ok(Args::Check(std::path::PathBuf::from("some/config.toml"))),
    );
}

#[test]
fn check_long_eq_normal_private_key_path_returns_check_config() {
    assert_eq!(
        parse_args(&["journald-exporter", "--check=some/config.toml"]),
        Ok(Args::Check(std::path::PathBuf::from("some/config.toml"))),
    );
}
