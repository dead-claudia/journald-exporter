// WARNING: This file is auto-generated by `scripts/gen-args-tests.js`. Do not modify directly.

use crate::cli::args::*;

fn parse_args(args: &[&str]) -> Result<Args, ArgsError> {
    crate::cli::args::parse_args(args.iter().map(std::ffi::OsString::from))
}

#[test]
fn short_normal_certificate_then_short_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/key.pem",
            "-K"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn short_normal_certificate_then_long_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/key.pem",
            "--private-key"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_short_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/key.pem",
            "-K"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_long_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/key.pem",
            "--private-key"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_short_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/key.pem",
            "-K"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_long_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/key.pem",
            "--private-key"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_short_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/key.pem",
            "-K"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_long_private_key_start_returns_missing_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/key.pem",
            "--private-key"
        ]),
        Err(ArgsError::MissingPrivateKey),
    );
}

#[test]
fn short_normal_private_key_then_short_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "-C"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_short_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "-C"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn long_normal_private_key_then_short_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "-C"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_short_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "-C"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn short_normal_private_key_then_long_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "--certificate"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_long_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "--certificate"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn long_normal_private_key_then_long_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "--certificate"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_long_certificate_start_returns_missing_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "--certificate"
        ]),
        Err(ArgsError::MissingCertificate),
    );
}

#[test]
fn short_normal_certificate_then_short_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "-K",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_normal_certificate_then_short_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "-K="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_normal_certificate_then_long_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "--private-key",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_normal_certificate_then_long_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "--private-key="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_short_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "-K",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_short_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "-K="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_long_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "--private-key",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_normal_certificate_then_long_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "--private-key="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_short_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "-K",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_short_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "-K="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_long_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "--private-key",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_normal_certificate_then_long_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "--private-key="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_short_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "-K",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_short_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "-K="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_long_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "--private-key",
            ""
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_normal_certificate_then_long_eq_empty_private_key_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "--private-key="
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_empty_private_key_then_short_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "",
            "-C",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_empty_private_key_then_short_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=",
            "-C",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_empty_private_key_then_short_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "",
            "-C",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_empty_private_key_then_short_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=",
            "-C",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_empty_private_key_then_short_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "",
            "-C=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_empty_private_key_then_short_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=",
            "-C=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_empty_private_key_then_short_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "",
            "-C=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_empty_private_key_then_short_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=",
            "-C=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_empty_private_key_then_long_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "",
            "--certificate",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_empty_private_key_then_long_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=",
            "--certificate",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_empty_private_key_then_long_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "",
            "--certificate",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_empty_private_key_then_long_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=",
            "--certificate",
            "some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_empty_private_key_then_long_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "",
            "--certificate=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_eq_empty_private_key_then_long_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=",
            "--certificate=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_empty_private_key_then_long_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "",
            "--certificate=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn long_eq_empty_private_key_then_long_eq_normal_certificate_returns_empty_private_key() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=",
            "--certificate=some/cert.pem"
        ]),
        Err(ArgsError::EmptyPrivateKey),
    );
}

#[test]
fn short_empty_certificate_then_short_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "",
            "-K",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_empty_certificate_then_short_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "",
            "-K=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_empty_certificate_then_long_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "",
            "--private-key",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_empty_certificate_then_long_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "",
            "--private-key=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_empty_certificate_then_short_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=",
            "-K",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_empty_certificate_then_short_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=",
            "-K=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_empty_certificate_then_long_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=",
            "--private-key",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_empty_certificate_then_long_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=",
            "--private-key=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_empty_certificate_then_short_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "",
            "-K",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_empty_certificate_then_short_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "",
            "-K=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_empty_certificate_then_long_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "",
            "--private-key",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_empty_certificate_then_long_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "",
            "--private-key=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_empty_certificate_then_short_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=",
            "-K",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_empty_certificate_then_short_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=",
            "-K=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_empty_certificate_then_long_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=",
            "--private-key",
            "some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_empty_certificate_then_long_eq_normal_private_key_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=",
            "--private-key=some/key.pem"
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_normal_private_key_then_short_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "-C",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_short_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "-C",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_normal_private_key_then_short_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "-C",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_short_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "-C",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_normal_private_key_then_short_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "-C="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_short_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "-C="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_normal_private_key_then_short_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "-C="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_short_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "-C="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_normal_private_key_then_long_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "--certificate",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_long_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "--certificate",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_normal_private_key_then_long_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "--certificate",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_long_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "--certificate",
            ""
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_normal_private_key_then_long_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "--certificate="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_eq_normal_private_key_then_long_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "--certificate="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_normal_private_key_then_long_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "--certificate="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn long_eq_normal_private_key_then_long_eq_empty_certificate_returns_empty_certificate() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "--certificate="
        ]),
        Err(ArgsError::EmptyCertificate),
    );
}

#[test]
fn short_normal_certificate_then_short_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "-K",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_certificate_then_short_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "-K=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_certificate_then_long_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "--private-key",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_certificate_then_long_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C",
            "some/cert.pem",
            "--private-key=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_certificate_then_short_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "-K",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_certificate_then_short_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "-K=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_certificate_then_long_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "--private-key",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_certificate_then_long_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-C=some/cert.pem",
            "--private-key=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_certificate_then_short_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "-K",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_certificate_then_short_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "-K=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_certificate_then_long_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "--private-key",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_certificate_then_long_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate",
            "some/cert.pem",
            "--private-key=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_certificate_then_short_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "-K",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_certificate_then_short_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "-K=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_certificate_then_long_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "--private-key",
            "some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_certificate_then_long_eq_normal_private_key_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--certificate=some/cert.pem",
            "--private-key=some/key.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_private_key_then_short_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "-C",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_private_key_then_short_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "-C",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_private_key_then_short_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "-C",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_private_key_then_short_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "-C",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_private_key_then_short_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "-C=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_private_key_then_short_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "-C=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_private_key_then_short_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "-C=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_private_key_then_short_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "-C=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_private_key_then_long_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "--certificate",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_private_key_then_long_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "--certificate",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_private_key_then_long_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "--certificate",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_private_key_then_long_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "--certificate",
            "some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_normal_private_key_then_long_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K",
            "some/key.pem",
            "--certificate=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn short_eq_normal_private_key_then_long_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "-K=some/key.pem",
            "--certificate=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_normal_private_key_then_long_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key",
            "some/key.pem",
            "--certificate=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}

#[test]
fn long_eq_normal_private_key_then_long_eq_normal_certificate_returns_success() {
    assert_eq!(
        parse_args(&[
            "journald-exporter",
            "-p",
            "123",
            "-k",
            "some/dir",
            "--private-key=some/key.pem",
            "--certificate=some/cert.pem"
        ]),
        Ok(Args::Parent(ParentArgs {
            port: std::num::NonZeroU16::new(123).unwrap(),
            key_dir: std::path::PathBuf::from("some/dir"),
            tls: Some(TLSOptions {
                certificate: std::path::PathBuf::from("some/cert.pem"),
                private_key: std::path::PathBuf::from("some/key.pem"),
            }),
        })),
    );
}
